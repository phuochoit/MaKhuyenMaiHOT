<?php
define('CONTENT_TYPE', 'application/json'); // current CONTENT_TYPE
define('AUTHORIZATION', 'Token iDKOG4khkBOkyMHYS7Y3jFS09Yy4WYX5'); // current CONTENT_TYPE
// hook cron add node
function cron_mkmh_cron() {
    ini_set('memory_limit', -1);
    ini_set('max_execution_time', 0);
    if(isset($_GET['cron_key']) && !empty($_GET['cron_key'])){
        _cron_mkmh_set_unpublished();
        $coupon =  _cron_mkmh_get_offers_informations();
        if(!empty($coupon)){
            _cron_mkmh_coupon_save_node($coupon->data);
        }
        $product =  _cron_mkmh_get_products();
        $topproduct = _cron_mkmh_get_topproducts();
        if(!empty($product)){
            _cron_mkmh_product_save_node($product->data,0);
            
        }
        if(!empty($topproduct)){
            _cron_mkmh_product_save_node($topproduct->data,1);
            
        }

        $coupon_masoffer = _cron_mkmh_get_masoffer_promotions();
        if(!empty($coupon_masoffer)){
            _cron_mkmh_coupon_masoffer_promotions_save_node($coupon_masoffer->data->promotions);
            // watchdog('my_debug',  var_export($coupon_masoffer->data->promotions) );
        }
    }
}

// save node products
function _cron_mkmh_product_save_node($data, $hot){
    if(empty($data)) return;
    $vidCategory = _get_vid_by_name('coupon_categories');
    $tid = null;

    for ($i=0; $i < count($data) ; $i++) { 
        $val = $data[$i];
        if($hot == 1){
            $host = _parse_url($val->link); 
            $vallink = $val->link;
            $category_name = _convert_category_name($val->category_name);    
        }else{
            $host = _parse_url($val->url); 
            $vallink = $val->url;
            $category_name = $val->cate;
        }

        $title = $val->name;
        $query = db_query("SELECT node.nid FROM {node} AS node WHERE node.type = :type AND node.status = 1 AND node.title = :title", array(':title' => $title, ':type' => 'products'))->rowCount();
        if(!$query){
            $merchant = _get_merchant_name($host);
            $query_merchant = db_query("SELECT n.nid FROM {node} AS n INNER JOIN {field_data_field_merchant} AS fm ON fm.entity_id = n.nid WHERE n.type = :type AND fm.field_merchant_value = :merchant", array(":type" => 'stores', ':merchant' => $merchant) )->fetchObject();
            // watchdog('my_debug', '<pre>' . var_export("SELECT n.nid FROM {node} AS n INNER JOIN {field_data_field_merchant} AS fm ON fm.entity_id = n.nid WHERE n.type = :type AND fm.field_merchant_value = ".$merchant) . '</pre>');
            if(!empty($query_merchant)){
                if(!empty($category_name)){
                    $query_tid = db_query("SELECT td.tid FROM {taxonomy_term_data} AS td LEFT JOIN  {field_data_field_categories_slug} AS sl ON sl.entity_id = td.tid WHERE td.vid = :vid AND sl.field_categories_slug_value = :slug", array(':vid' => 2, ':slug' => $category_name))->fetchObject();
                    $tid = $query_tid->tid;
                }

                $node = new stdClass();
                $node->type = 'products';
                $node->uid = 1;
                $node->title = $title;
                $node->created = time();
                $node->changed = $node->created;
                $node->promote = $node->created;
                $node->sticky  = 0;
                $node->language = LANGUAGE_NONE;
                $node->comment = 0;
                //get_content
                $node->field_get_content['und'][0]['value'] = 1;
                $node->field_content_link['und'][0]['url'] = $vallink;

                //aff link
                $node->field_aff_link['und'][0]['url'] = $val->aff_link;
                //product hot 
                $node->field_product_hot['und'][0]['value'] = $hot;
                // merchant
                $node->field_merchant['und'][0]['value'] = $merchant;
                //store
                $node->field_store['und'][0]['nid'] = $query_merchant->nid;
                // save coupon categories
                if(!empty($tid)){
                    $node->field_coupon_categories['und'][0]['tid'] = $tid;
                }
                //save image
                $fid = _save_image_form_url($val->image);
                if(!empty($fid)){
                    $node->field_image['und'][0]['fid'] = $fid->fid;
                }
                // tags
                $tags = _save_tag_by_title($title);
                if(!empty($tags)){
                    for ($i=0; $i < count($tags); $i++) { 
                        $node->field_tags['und'][$i]['tid'] = $tags[$i];
                    }    
                }
                // price
                $node->field_price['und'][0]['value'] = isset($val->price) ? $val->price : null;
                //discount
                $node->field_discount['und'][0]['value'] = isset($val->discount) ? $val->discount : null;
                //discount amount
                $node->field_discount_amount['und'][0]['value'] = isset($val->discount_amount) ? $val->discount_amount : null ;
                //discount rate 
                $node->field_discount_rate['und'][0]['value'] = isset($val->discount_rate) ? $val->discount_rate : null;
                // custom teaser
                $teaser = 'Top Những Sản Phẩm Bán Chạy '.$title.' giá rẻ nhất '.$val->price.'đ . Mua hàng tiết kiệm tại Mã Khuyến Mãi HOT.';
                $node->field_teaser['und'][0]['value'] = $teaser;
                // save node
                node_save($node);
            }
        }
    }
}

function _cron_mkmh_coupon_masoffer_promotions_save_node($data){
    if(empty($data) )
        return;

    $vidCategory = _get_vid_by_name('coupon_categories');

    for ($i=0; $i < count($data); $i++) { 
        $val = $data[$i];
        if(empty($val->aff_url))
            return;
        $query = db_query("SELECT node.nid FROM {node} AS node WHERE node.type = :type AND node.status = 1 AND node.title = :title", array(':title' => $val->title, ':type' => 'coupons'))->rowCount();

        if(!$query){
            $merchant = _get_merchant_name($val->offer_id);
            $query_merchant = db_query("SELECT n.nid FROM {node} AS n INNER JOIN {field_data_field_merchant} AS fm ON fm.entity_id = n.nid WHERE n.type = :type AND fm.field_merchant_value = :merchant", array(":type" => 'stores', ':merchant' => $merchant) )->fetchObject();

            if(!empty($query_merchant)){
                $title = $val->title;
                $node = new stdClass();
                $node->type = 'coupons';
                $node->uid = 1;
                $node->title = $title;
                $node->created = time();
                $node->changed = $node->created;
                $node->promote = $node->created;
                $node->sticky  = 0;
                $node->language = LANGUAGE_NONE;
                $node->comment = 0;

                //aff_link
                $node->field_aff_link['und'][0]['url'] = $val->aff_url;
                //field_teaser
                $node->field_teaser[LANGUAGE_NONE][0]['value'] = $val->description;
                // start_time
                if(isset($val->started_date) || !empty($val->started_date)){
                    $node->field_start_time['und'][0]['value'] = date('Y-m-d', $val->started_date);
                }
                // end_time
                if(isset($val->expired_date) || !empty($val->expired_date)){
                    $node->field_end_time['und'][0]['value'] = date('Y-m-d', $val->expired_date);
                }
                
                // merchant
                $node->field_merchant['und'][0]['value'] = $val->offer_id;
                $node->field_store['und'][0]['nid'] = $query_merchant->nid;
                // check category
               
                // check coupon
                if(!empty($val->coupon_code)){
                    $node->field_coupon_code['und'][0]['value'] = !empty($val->coupon_code) ? $val->coupon_code : null ;
                }

                if(isset($val->category_name)){
                    $tidCategories = _get_tid_by_name(trim($val->category_name),'coupon_categories');
                    if(!empty($tidCategories)){
                        $node->field_coupon_categories['und'][0]['tid'] = $tidCategories;
                    }
                }
                if(!isset($val->category_name)){
                    $node->field_coupon_categories['und'][0]['tid'] = 168;
                }

                // field tag
                $tags = _save_tag_by_title($title);
                if(!empty($tags)){
                    for ($i=0; $i < count($tags); $i++) { 
                    $node->field_tags['und'][$i]['tid'] = $tags[$i];
                    }    
                }
                // save node
                node_save($node);
                
            }
        }
    }
}
// save node coupons
function _cron_mkmh_coupon_save_node($data){
    if(empty($data))
        return;

    // get vid
    $vidCategory = _get_vid_by_name('coupon_categories');
    for ($i=0; $i < count($data); $i++) { 
        $val = $data[$i];
        
        $query = db_query("SELECT node.nid FROM {node} AS node WHERE node.type = :type AND node.status = 1 AND node.title = :title", array(':title' => $val->name, ':type' => 'coupons'))->rowCount();
        if(!$query){
            
            $merchant = _get_merchant_name($val->merchant);

            $query_merchant = db_query("SELECT n.nid FROM {node} AS n INNER JOIN {field_data_field_merchant} AS fm ON fm.entity_id = n.nid WHERE n.type = :type AND fm.field_merchant_value = :merchant", array(":type" => 'stores', ':merchant' => $merchant) )->fetchObject();
             
            if(!empty($query_merchant)){
                
                $title = $val->name;
                $node = new stdClass();
                $node->type = 'coupons';
                $node->uid = 1;
                $node->title = $title;
                $node->created = time();
                $node->changed = $node->created;
                $node->promote = $node->created;
                $node->sticky  = 0;
                $node->language = LANGUAGE_NONE;
                $node->comment = 0;
                //aff_link
                $node->field_aff_link['und'][0]['url'] = $val->aff_link;
                //field_teaser
                $node->field_teaser[LANGUAGE_NONE][0]['value'] = $val->content;
                // start_time
                $node->field_start_time['und'][0]['value'] = $val->start_time;
                // end_time
                $node->field_end_time['und'][0]['value'] = $val->end_time;
                // merchant
                $node->field_merchant['und'][0]['value'] = $val->merchant;
                $node->field_store['und'][0]['nid'] = $query_merchant->nid;
                // check category
                if(!empty($val->categories)){
                    $tidCategories = _get_tid_by_name(trim($val->categories[0]->category_name_show),'coupon_categories');
                    if(!empty($tidCategories)){
                        $node->field_coupon_categories['und'][0]['tid'] = $tidCategories;
                    }
                    
                }
                // check coupon
                if(!empty($val->coupons)){
                    $node->field_coupon_code['und'][0]['value'] = !empty($val->coupons[0]->coupon_code) ? $val->coupons[0]->coupon_code : null ;

                    $node->field_coupon_note['und'][0]['value'] = !empty($val->coupons[0]->coupon_desc) ? $val->coupons[0]->coupon_desc : null ;

                    $node->field_coupon_save['und'][0]['value'] = !empty($val->coupons[0]->coupon_save) ? $val->coupons[0]->coupon_save : null ;
                }
                // field tag
                $tags = _save_tag_by_title($title);
                if(!empty($tags)){
                    
                    for ($i=0; $i < count($tags); $i++) { 
                    $node->field_tags['und'][$i]['tid'] = $tags[$i];
                    }    
                }
                // save node
                node_save($node);
            }            
        }
    }
}

// set unpublished node coupons
function _cron_mkmh_set_unpublished(){
    $end_time = date('Y-m-d',strtotime('-1 day', time()));
    $query = db_query("SELECT node.nid FROM node AS {node} INNER JOIN {field_data_field_end_time} AS et ON et.entity_id = node.nid WHERE node.type = :type AND node.status = :status AND et.field_end_time_value < :date_end", array(':type' => 'coupons',':status' => 1,':date_end' => $end_time))->fetchAll();
    if(!empty($query)){
        $nid= [];
        foreach ($query as $key => $val) {
            $node = node_load($val->nid);
            $node->status = 0;
            node_save($node);
        }
    }
}
// convert category name
function _convert_category_name($name){
    if(empty($name)) return;
    switch ($name) {
        case 'Mobiles & Tablets':
        case 1;
        $name = 'dien-thoai-may-tinh-bang';
        return $name;
        case 'Tivi - Audio > Tivi':
        case 'TV, Audio / Video, Gaming & Wearables':
        $name = 'tivi-am-thanh';
        return $name;
        case 'Mother & Baby':
        case 'Baby & Toddler':
        $name = 'me-va-be';
        return $name;
        case 'Điện Tử':
        $name = 'dien-tu-thiet-bi-so-khac';
        return $name;
    }
        
}

// _get_merchant_name
function _get_merchant_name($merchant){
    if(empty($merchant)) return;
    $name = null;
    switch ($merchant) {
        case 'lazada':
        case 'lazada.vn':
            $name = 'lazada';
            break;
        case 'fptshop.com.vn':
            $name = 'fptshop';
            break;
        case 'nguyenkim.com':
            $name = 'nguyenkimvn';
            break;
        case 'tiki.vn':
            $name = 'tikivn';
            break;
        case 'lotte.vn':
        case 'lotte':
            $name = 'lottevn';
            break;
        case 'yes24':
            $name = 'yes24vn';
            break;
        case 'tiki':
            $name = 'tikivn';
            break;
        case 'adayroi.com':
            $name = 'adayroi';
            break;
        default:
            $name = $merchant ;
        break;

    }

    return $name;
}
// save tag
function _save_tag_by_title($name){
    if(empty($name))
        return;
    $vidTags = _get_vid_by_name('tags');
    $tags = explode("-",trim($name));
    $tid = null;
    if(count($tags) > 1){
        foreach ($tags as $kTags => $valTags) {
            $tid[$kTags] = _get_tid_by_name(trim($valTags),'tags');
            if(empty($tid[$kTags])){
                $tid[$kTags] = _create_taxonomy_term(trim($valTags),$vidTags);
            }
        }
    }
    return $tid;
}
// save file from url
function _save_image_form_url($url){
    if(empty($url))
        return;
    $file_info = system_retrieve_file($url, 'public://', TRUE,FILE_EXISTS_REPLACE);
    return $file_info;
    
}

// create taxonomy
function _create_taxonomy_term($name, $vid) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    taxonomy_term_save($term);
    return $term->tid;
}

// get tid of taxonomy
function _get_tid_by_name($term_name, $vocabulary_name) {
    if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
        $tree = taxonomy_get_tree($vocabulary->vid);
        switch (stripUnicode(strtolower($term_name))) {
            case 'dien-tu':
                $name = 'Điện tử & Thiết bị số Khác';
                break;
            case 'nha cua & doi song':
            case 'nha cua va doi song':
                $name = 'Nhà cửa đời sống';
                break;
            case 'du lich':
                $name = 'Đồ dùng du lịch, thể thao, dã ngoại';
                break;
            case 'dien gia dung':
            case 'gia dung':
                $name = 'Thiết bị gia dụng';
                break;
            case 'cac nganh hang':
                $name = 'Tổng hợp';
                break;
            case 'my pham':
            case 'thoi trang':
                $name = 'Thời trang - Mỹ phẩm';
                break;
            case 'sach':
                $name = 'Sách - VPP - Quà tặng';
                break;
            case 'dien thoai di dong':
                $name = 'Điện thoại - Máy tính bảng';
                break;
            case 'me va be':
                $name = 'Mẹ & Bé';
                break;
            case 'phu kien':
                $name = 'Điện tử & Thiết bị số Khác';
                break;
            case 'dich vu':
                $name = 'Voucher & Dịch vụ';
                break;
            default:
                $name = $term_name;
                break;
        }

        foreach ($tree as $term) {
            if (stripUnicode(strtolower($term->name)) == stripUnicode(($name))) {
                return $term->tid;
            }
        }
    }
    return FALSE;
}
// get vid of taxonomy
function _get_vid_by_name($name){
    $vocab = taxonomy_vocabulary_machine_name_load($name);
    $vid = $vocab->vid;
    return $vid;
}

// get top product
function _cron_mkmh_get_topproducts(){
    $url = 'https://api.accesstrade.vn/v1/top_products';
    $opts = [
        "http" => [
            "method" => "GET",
            "header" => "Authorization: ".AUTHORIZATION."\r\n" .
                "Content-Type: ".CONTENT_TYPE."\r\n"
        ]
    ];
    $context = stream_context_create($opts);
    // Open the file using the HTTP headers set above
    $file = file_get_contents($url, false, $context);
    $data = json_decode($file);
    return !empty($data) ? $data : null;
}
// get all chuong trinh khuyen mai
function _cron_mkmh_get_offers_informations(){
    $url = 'https://api.accesstrade.vn/v1/offers_informations?status=1';
    $opts = [
        "http" => [
            "method" => "GET",
            "header" => "Authorization: ".AUTHORIZATION."\r\n" .
                "Content-Type: ".CONTENT_TYPE."\r\n"
        ]
    ];
    $context = stream_context_create($opts);
    // Open the file using the HTTP headers set above
    $file = file_get_contents($url, false, $context);
    $data = json_decode($file);
    return !empty($data) ? $data : null;
}

// get all content of product
function _cron_mkmh_get_products(){
    $url = 'https://api.accesstrade.vn/v1/datafeeds?limit=50';
    $opts = [
        "http" => [
            "method" => "GET",
            "header" => "Authorization: ".AUTHORIZATION."\r\n" .
                "Content-Type: ".CONTENT_TYPE."\r\n"
        ]
    ];

    $context = stream_context_create($opts);
    $file = file_get_contents($url, false, $context);
    $data = json_decode($file);
    return !empty($data) ? $data : null;
}


// parse_url return host
function _parse_url($url){
    if(empty($url)) return;
    $url = preg_replace('#^(http(s)?://)?w{3}\.#', '$1', $url);
    $result = parse_url($url);
    return $result['host'];
}

function _cron_mkmh_get_masoffer_promotions(){
    $url = 'http://api.masoffer.com/promotions?publisher_id=phuochoit&token=ByfOVhQf1UTclJGa5bUJ9g%3D%3D';
    $opts = [
        "http" => [
            "method" => "GET",
        ]
    ];

    $context = stream_context_create($opts);
    $file = file_get_contents($url, false, $context);
    $data = json_decode($file);
    return !empty($data) ? $data : null;
}

function stripUnicode($str){
    if(!$str) return false;
    $unicode = array(
        'a'=>'á|à|ả|ã|ạ|ă|ắ|ặ|ằ|ẳ|ẵ|â|ấ|ầ|ẩ|ẫ|ậ',
        'd'=>'đ',
        'e'=>'é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ',
        'i'=>'í|ì|ỉ|ĩ|ị',
        'o'=>'ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ',
        'u'=>'ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự',
        'y'=>'ý|ỳ|ỷ|ỹ|ỵ',
    );
    foreach($unicode as $nonUnicode=>$uni) $str = preg_replace("/($uni)/i",$nonUnicode,$str);
    return $str;
}